class GFG
{
    ArrayList<Integer> find(int arr[], int n, int x)
    {
        // code here
        int firstOccurrence = findFirstOccurrence(arr, x);
        int lastOccurrence = findLastOccurrence(arr, x);

        ArrayList<Integer> result = new ArrayList<>();
        result.add(firstOccurrence);
        result.add(lastOccurrence);

        return result;
    }

    private int findFirstOccurrence(int[] arr, int x) {
        int low = 0;
        int high = arr.length - 1;
        int result = -1;

        while (low <= high) {
            int mid = low + (high - low) / 2;

            if (arr[mid] == x) {
                result = mid;
                high = mid - 1; 
            } else if (arr[mid] < x) {
                low = mid + 1;
            } else {
                high = mid - 1;
            }
        }

        return result;
    }

    private int findLastOccurrence(int[] arr, int x) {
        int low = 0;
        int high = arr.length - 1;
        int result = -1;

        while (low <= high) {
            int mid = low + (high - low) / 2;

            if (arr[mid] == x) {
                result = mid;
                low = mid + 1; 
            } else if (arr[mid] < x) {
                low = mid + 1;
            } else {
                high = mid - 1;
            }
        }

        return result;
    }
}